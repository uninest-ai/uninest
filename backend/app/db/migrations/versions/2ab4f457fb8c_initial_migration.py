"""Initial migration

Revision ID: 2ab4f457fb8c
Revises: 
Create Date: 2025-04-09

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2ab4f457fb8c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - modified for safer migration ###
    
    # First check if user_type column already exists in users table
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = [column['name'] for column in inspector.get_columns('users')]
    
    if 'user_type' not in columns:
        # Add user_type as nullable first
        op.add_column('users', sa.Column('user_type', sa.String(), nullable=True))
        
        # Set default value for existing records
        op.execute("UPDATE users SET user_type = 'tenant' WHERE user_type IS NULL")
        
        # Now make it NOT NULL
        op.alter_column('users', 'user_type', nullable=False)
    
    # Drop columns if they exist
    if 'is_landlord' in columns:
        op.drop_column('users', 'is_landlord')
    
    if 'is_tenant' in columns:
        op.drop_column('users', 'is_tenant')
    
    # Check if columns exist in user_preferences
    if inspector.has_table('user_preferences'):
        user_pref_columns = [column['name'] for column in inspector.get_columns('user_preferences')]
        if 'distance_to_core' not in user_pref_columns:
            op.add_column('user_preferences', sa.Column('distance_to_core', sa.Float(), nullable=True))
        
        # Add preference_category if it doesn't exist
        if 'preference_category' not in user_pref_columns:
            op.add_column('user_preferences', sa.Column('preference_category', sa.String(), nullable=True))
            op.execute("UPDATE user_preferences SET preference_category = 'property' WHERE preference_category IS NULL")
            op.alter_column('user_preferences', 'preference_category', nullable=False)
    
    # Check if columns exist in tenant_profiles
    if inspector.has_table('tenant_profiles'):
        tenant_columns = [column['name'] for column in inspector.get_columns('tenant_profiles')]
        if 'preferred_core_lat' not in tenant_columns:
            op.add_column('tenant_profiles', sa.Column('preferred_core_lat', sa.Float(), nullable=True))
        
        if 'preferred_core_lng' not in tenant_columns:
            op.add_column('tenant_profiles', sa.Column('preferred_core_lng', sa.Float(), nullable=True))
    
    # Check if columns exist in properties
    if inspector.has_table('properties'):
        property_columns = [column['name'] for column in inspector.get_columns('properties')]
        
        if 'owner_id' in property_columns:
            op.drop_column('properties', 'owner_id')
        
        if 'distance_to_cmu' in property_columns:
            op.drop_column('properties', 'distance_to_cmu')
        
        if 'is_active' not in property_columns:
            op.add_column('properties', sa.Column('is_active', sa.Boolean(), nullable=True))
            op.execute("UPDATE properties SET is_active = TRUE WHERE is_active IS NULL")
    
    # Create association tables if they don't exist
    if not inspector.has_table('property_preferences'):
        op.create_table('property_preferences',
            sa.Column('tenant_id', sa.Integer(), nullable=False),
            sa.Column('property_id', sa.Integer(), nullable=False),
            sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
            sa.ForeignKeyConstraint(['tenant_id'], ['tenant_profiles.id'], ),
            sa.PrimaryKeyConstraint('tenant_id', 'property_id'),
            sa.UniqueConstraint('tenant_id', 'property_id')
        )
    
    if not inspector.has_table('roommate_preferences'):
        op.create_table('roommate_preferences',
            sa.Column('tenant_id', sa.Integer(), nullable=False),
            sa.Column('roommate_id', sa.Integer(), nullable=False),
            sa.ForeignKeyConstraint(['roommate_id'], ['users.id'], ),
            sa.ForeignKeyConstraint(['tenant_id'], ['tenant_profiles.id'], ),
            sa.PrimaryKeyConstraint('tenant_id', 'roommate_id'),
            sa.UniqueConstraint('tenant_id', 'roommate_id')
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - modified for safer rollback ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    
    if inspector.has_table('roommate_preferences'):
        op.drop_table('roommate_preferences')
    
    if inspector.has_table('property_preferences'):
        op.drop_table('property_preferences')
    
    if inspector.has_table('user_preferences'):
        columns = [column['name'] for column in inspector.get_columns('user_preferences')]
        if 'preference_category' in columns:
            op.drop_column('user_preferences', 'preference_category')
        if 'distance_to_core' in columns:
            op.drop_column('user_preferences', 'distance_to_core')
    
    if inspector.has_table('users'):
        columns = [column['name'] for column in inspector.get_columns('users')]
        if 'user_type' in columns:
            op.add_column('users', sa.Column('is_tenant', sa.BOOLEAN(), autoincrement=False, nullable=True))
            op.add_column('users', sa.Column('is_landlord', sa.BOOLEAN(), autoincrement=False, nullable=True))
            op.drop_column('users', 'user_type')
    
    if inspector.has_table('tenant_profiles'):
        columns = [column['name'] for column in inspector.get_columns('tenant_profiles')]
        if 'preferred_core_lng' in columns:
            op.drop_column('tenant_profiles', 'preferred_core_lng')
        if 'preferred_core_lat' in columns:
            op.drop_column('tenant_profiles', 'preferred_core_lat')
    
    if inspector.has_table('properties'):
        columns = [column['name'] for column in inspector.get_columns('properties')]
        op.add_column('properties', sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True))
        op.add_column('properties', sa.Column('distance_to_cmu', sa.FLOAT(), autoincrement=False, nullable=True))
        if 'is_active' in columns:
            op.drop_column('properties', 'is_active')
    # ### end Alembic commands ###